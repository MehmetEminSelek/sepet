import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import '../models/product_model.dart';
import '../models/sepet_model.dart';
import '../models/sepet_item_model.dart';

class ProductSearchService {
  static final ProductSearchService _instance =
      ProductSearchService._internal();
  factory ProductSearchService() => _instance;
  ProductSearchService._internal();

  // Demo API endpoints (ger√ßek entegrasyon i√ßin deƒüi≈ütirilecek)
  static const String _getirApiBase = 'https://api.getir.com/v1';
  static const String _migrosApiBase = 'https://api.migros.com.tr/v1';
  static const String _a101ApiBase = 'https://api.a101.com.tr/v1';

  // √úr√ºn arama
  Future<List<ProductModel>> searchProducts({
    required String query,
    required Platform platform,
    int limit = 20,
    String? category,
  }) async {
    try {
      print('üîç √úr√ºn aranƒ±yor: "$query" - Platform: ${platform.displayName}');

      // Demo data i√ßin
      if (platform == Platform.demo) {
        return _getDemoProducts(query, limit);
      }

      // Ger√ßek API √ßaƒürƒ±larƒ± (≈üimdilik demo data d√∂nd√ºr√ºyoruz)
      return _searchFromPlatform(platform, query, limit, category);
    } catch (e) {
      print('‚ùå √úr√ºn arama hatasƒ±: $e');
      return [];
    }
  }

  // Platform'dan √ºr√ºn ara
  Future<List<ProductModel>> _searchFromPlatform(
    Platform platform,
    String query,
    int limit,
    String? category,
  ) async {
    // ≈ûimdilik demo data d√∂nd√ºr√ºyoruz
    // Ger√ßek entegrasyon i√ßin her platform'un API'si kullanƒ±lacak
    return _getDemoProducts(query, limit);
  }

  // Demo √ºr√ºnler
  List<ProductModel> _getDemoProducts(String query, int limit) {
    final allProducts = [
      // S√ºt √ºr√ºnleri
      ProductModel(
        id: '1',
        name: 'S√ºt 1L',
        description: 'Tam yaƒülƒ± s√ºt',
        price: 8.50,
        currency: 'TL',
        category: 'S√ºt √úr√ºnleri',
        brand: 'Pƒ±nar',
        imageUrl: 'https://via.placeholder.com/150x150/4CAF50/white?text=S√ºt',
        platform: Platform.demo,
        unit: 'litre',
        inStock: true,
        rating: 4.5,
        reviewCount: 1250,
      ),
      ProductModel(
        id: '2',
        name: 'Yoƒüurt 500g',
        description: 'Doƒüal yoƒüurt',
        price: 6.75,
        currency: 'TL',
        category: 'S√ºt √úr√ºnleri',
        brand: 'Danone',
        imageUrl:
            'https://via.placeholder.com/150x150/2196F3/white?text=Yoƒüurt',
        platform: Platform.demo,
        unit: 'gram',
        inStock: true,
        rating: 4.3,
        reviewCount: 890,
      ),

      // Meyve sebze
      ProductModel(
        id: '3',
        name: 'Elma 1kg',
        description: 'Taze kƒ±rmƒ±zƒ± elma',
        price: 12.00,
        currency: 'TL',
        category: 'Meyve & Sebze',
        brand: 'Yerel √úretici',
        imageUrl: 'https://via.placeholder.com/150x150/F44336/white?text=Elma',
        platform: Platform.demo,
        unit: 'kilogram',
        inStock: true,
        rating: 4.7,
        reviewCount: 2100,
      ),
      ProductModel(
        id: '4',
        name: 'Domates 1kg',
        description: 'Taze domates',
        price: 15.50,
        currency: 'TL',
        category: 'Meyve & Sebze',
        brand: 'Yerel √úretici',
        imageUrl:
            'https://via.placeholder.com/150x150/FF5722/white?text=Domates',
        platform: Platform.demo,
        unit: 'kilogram',
        inStock: true,
        rating: 4.2,
        reviewCount: 1560,
      ),

      // Ekmek
      ProductModel(
        id: '5',
        name: 'Ekmek',
        description: 'Taze ekmek',
        price: 3.50,
        currency: 'TL',
        category: 'Ekmek & Unlu Mamul',
        brand: 'Uno',
        imageUrl: 'https://via.placeholder.com/150x150/795548/white?text=Ekmek',
        platform: Platform.demo,
        unit: 'adet',
        inStock: true,
        rating: 4.4,
        reviewCount: 3200,
      ),

      // Temizlik
      ProductModel(
        id: '6',
        name: 'Bula≈üƒ±k Deterjanƒ±',
        description: 'Limonlu bula≈üƒ±k deterjanƒ±',
        price: 18.90,
        currency: 'TL',
        category: 'Temizlik',
        brand: 'Fairy',
        imageUrl:
            'https://via.placeholder.com/150x150/FFEB3B/black?text=Deterjan',
        platform: Platform.demo,
        unit: '≈üi≈üe',
        inStock: true,
        rating: 4.6,
        reviewCount: 980,
      ),

      // Atƒ±≈ütƒ±rmalƒ±k
      ProductModel(
        id: '7',
        name: 'Cips 150g',
        description: 'Tuzlu patates cipsi',
        price: 7.25,
        currency: 'TL',
        category: 'Atƒ±≈ütƒ±rmalƒ±k',
        brand: 'Lays',
        imageUrl: 'https://via.placeholder.com/150x150/FF9800/white?text=Cips',
        platform: Platform.demo,
        unit: 'paket',
        inStock: true,
        rating: 4.1,
        reviewCount: 750,
      ),

      // ƒ∞√ßecek
      ProductModel(
        id: '8',
        name: 'Kola 1L',
        description: 'Gazlƒ± i√ßecek',
        price: 9.50,
        currency: 'TL',
        category: 'ƒ∞√ßecek',
        brand: 'Coca Cola',
        imageUrl: 'https://via.placeholder.com/150x150/212121/white?text=Kola',
        platform: Platform.demo,
        unit: '≈üi≈üe',
        inStock: true,
        rating: 4.0,
        reviewCount: 1800,
      ),
    ];

    // Arama query'sine g√∂re filtrele
    final filteredProducts = allProducts
        .where((product) {
          final searchQuery = query.toLowerCase();
          return product.name.toLowerCase().contains(searchQuery) ||
              product.description.toLowerCase().contains(searchQuery) ||
              product.category.toLowerCase().contains(searchQuery) ||
              product.brand.toLowerCase().contains(searchQuery);
        })
        .take(limit)
        .toList();

    return filteredProducts;
  }

  // Kategorileri getir
  Future<List<String>> getCategories(Platform platform) async {
    return [
      'S√ºt √úr√ºnleri',
      'Meyve & Sebze',
      'Et & Tavuk',
      'Ekmek & Unlu Mamul',
      'Temizlik',
      'Atƒ±≈ütƒ±rmalƒ±k',
      'ƒ∞√ßecek',
      'Dondurulmu≈ü',
      'Kahvaltƒ±lƒ±k',
      'Bebek',
      'Ki≈üisel Bakƒ±m',
      'Ev & Ya≈üam',
    ];
  }

  // Pop√ºler √ºr√ºnleri getir
  Future<List<ProductModel>> getPopularProducts(Platform platform) async {
    final products = await searchProducts(
      query: '',
      platform: platform,
      limit: 10,
    );

    // Rating'e g√∂re sƒ±rala
    products.sort((a, b) => b.rating.compareTo(a.rating));
    return products;
  }

  // √úr√ºnlerden otomatik sepet olu≈ütur
  Future<SepetModel> createSepetFromProducts({
    required List<ProductModel> products,
    required String sepetName,
    required String workspaceId,
    required String userId,
    required String userName,
    String? description,
  }) async {
    try {
      print('üõí Otomatik sepet olu≈üturuluyor: $sepetName');
      print('   √úr√ºn sayƒ±sƒ±: ${products.length}');

      // √úr√ºnleri SepetItemModel'e d√∂n√º≈üt√ºr
      final items = products
          .map((product) => product.toSepetItem(userId, userName))
          .toList();

      // Sepet olu≈ütur
      final now = DateTime.now();
      final sepet = SepetModel(
        id: '', // FirestoreService tarafƒ±ndan atanacak
        name: sepetName,
        description: description ?? 'Otomatik olu≈üturulan sepet',
        workspaceId: workspaceId,
        members: [userName],
        memberIds: [userId],
        joinCode: SepetModel.generateJoinCode(userId),
        color: _getSepetColorByCategory(products),
        icon: _getSepetIconByCategory(products),
        items: items,
        createdBy: userId,
        createdAt: now,
        updatedAt: now,
      );

      print('‚úÖ Otomatik sepet olu≈üturuldu');
      return sepet;
    } catch (e) {
      print('‚ùå Otomatik sepet olu≈üturma hatasƒ±: $e');
      rethrow;
    }
  }

  // Kategoriye g√∂re sepet rengi belirle
  Color _getSepetColorByCategory(List<ProductModel> products) {
    if (products.isEmpty) return const Color(0xFF2196F3);

    // En √ßok tekrar eden kategoriyi bul
    final categoryCount = <String, int>{};
    for (final product in products) {
      categoryCount[product.category] =
          (categoryCount[product.category] ?? 0) + 1;
    }

    final mostCommonCategory =
        categoryCount.entries.reduce((a, b) => a.value > b.value ? a : b).key;

    // Kategoriye g√∂re renk d√∂nd√ºr
    switch (mostCommonCategory) {
      case 'S√ºt √úr√ºnleri':
        return const Color(0xFF2196F3); // Mavi
      case 'Meyve & Sebze':
        return const Color(0xFF4CAF50); // Ye≈üil
      case 'Et & Tavuk':
        return const Color(0xFFF44336); // Kƒ±rmƒ±zƒ±
      case 'Ekmek & Unlu Mamul':
        return const Color(0xFF795548); // Kahverengi
      case 'Temizlik':
        return const Color(0xFFFFEB3B); // Sarƒ±
      case 'Atƒ±≈ütƒ±rmalƒ±k':
        return const Color(0xFFFF9800); // Turuncu
      case 'ƒ∞√ßecek':
        return const Color(0xFF9C27B0); // Mor
      case 'Dondurulmu≈ü':
        return const Color(0xFF00BCD4); // Cyan
      default:
        return const Color(0xFF2196F3); // Varsayƒ±lan mavi
    }
  }

  // Kategoriye g√∂re sepet ikonu belirle
  IconData _getSepetIconByCategory(List<ProductModel> products) {
    if (products.isEmpty) return Icons.shopping_basket;

    // En √ßok tekrar eden kategoriyi bul
    final categoryCount = <String, int>{};
    for (final product in products) {
      categoryCount[product.category] =
          (categoryCount[product.category] ?? 0) + 1;
    }

    final mostCommonCategory =
        categoryCount.entries.reduce((a, b) => a.value > b.value ? a : b).key;

    // Kategoriye g√∂re ikon d√∂nd√ºr
    switch (mostCommonCategory) {
      case 'S√ºt √úr√ºnleri':
        return Icons.local_drink;
      case 'Meyve & Sebze':
        return Icons.eco;
      case 'Et & Tavuk':
        return Icons.restaurant;
      case 'Ekmek & Unlu Mamul':
        return Icons.bakery_dining;
      case 'Temizlik':
        return Icons.cleaning_services;
      case 'Atƒ±≈ütƒ±rmalƒ±k':
        return Icons.cookie;
      case 'ƒ∞√ßecek':
        return Icons.local_cafe;
      case 'Dondurulmu≈ü':
        return Icons.ac_unit;
      default:
        return Icons.shopping_basket;
    }
  }

  // Akƒ±llƒ± sepet √∂nerileri
  Future<List<String>> getSepetSuggestions(List<ProductModel> products) async {
    if (products.isEmpty) return ['Yeni Sepet'];

    final suggestions = <String>[];

    // Kategoriye g√∂re √∂neriler
    final categories = products.map((p) => p.category).toSet();

    if (categories.contains('Meyve & Sebze') &&
        categories.contains('S√ºt √úr√ºnleri')) {
      suggestions.add('Haftalƒ±k Market');
    }

    if (categories.contains('Temizlik')) {
      suggestions.add('Temizlik Malzemeleri');
    }

    if (categories.contains('Atƒ±≈ütƒ±rmalƒ±k') && categories.contains('ƒ∞√ßecek')) {
      suggestions.add('Parti Alƒ±≈üveri≈üi');
    }

    if (categories.contains('Ekmek & Unlu Mamul') &&
        categories.contains('S√ºt √úr√ºnleri')) {
      suggestions.add('Kahvaltƒ± Sepeti');
    }

    // Platform adƒ±na g√∂re √∂neriler
    final platforms = products.map((p) => p.platform.displayName).toSet();
    if (platforms.length == 1) {
      suggestions.add('${platforms.first} Alƒ±≈üveri≈üi');
    }

    // Varsayƒ±lan √∂neriler
    suggestions.addAll([
      'Market Listesi',
      'G√ºnl√ºk ƒ∞htiya√ßlar',
      'Hƒ±zlƒ± Alƒ±≈üveri≈ü',
    ]);

    return suggestions.take(5).toList();
  }

  // Fiyat kar≈üƒ±la≈ütƒ±rmasƒ±
  Future<Map<Platform, List<ProductModel>>> compareProductPrices(
      String productName) async {
    final results = <Platform, List<ProductModel>>{};

    for (final platform in Platform.values) {
      if (platform == Platform.demo) continue;

      final products = await searchProducts(
        query: productName,
        platform: platform,
        limit: 5,
      );

      if (products.isNotEmpty) {
        results[platform] = products;
      }
    }

    return results;
  }
}
